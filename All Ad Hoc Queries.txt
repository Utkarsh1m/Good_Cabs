# Good_Cabs
# Business Request 1, city-level fare and trip summary Report
	SELECT 
	    a.city_name,
	    COUNT(b.trip_id) AS total_trips,
	    round(SUM(b.fare_amount) / SUM(b.distance_travelled_km),2) AS Avg_Fare_Per_Km,
	    round(SUM(b.fare_amount) / COUNT(b.trip_id),2)AS Avg_Fare_Per_Trip,
	    CONCAT(ROUND(COUNT(b.trip_id) * 100.0 / (SELECT COUNT(trip_id) FROM fact_trips), 2), '%') AS pct_contribution
	FROM 
	    dim_city a 
	JOIN 
	    fact_trips b 
	ON 
	    a.city_id = b.city_id 
	GROUP BY 
	    a.city_name order by total_trips desc; 

#  Business Request 2, MonthIy City-Level Trips Target Performance Report
	   
    --FIRST CREATE A VIEW 
	CREATE VIEW get_actual_trips_view AS
	    SELECT 
	        b.city_name,
	        b.city_id,
	        MONTHNAME(a.date) AS month,
	        COUNT(a.trip_id) AS actual_trips
	    FROM
	        fact_trips a
	            JOIN
	        dim_city b ON a.city_id = b.city_id
	    GROUP BY b.city_name , b.city_id , MONTHNAME(a.date);
	
   -- THEN USE THE STORED PROCEDURE IN THIS QUERY


	SELECT 
	    a.*,
	    b.total_target_trips,
	    CASE
	        WHEN a.actual_trips > b.total_target_trips THEN 'Above Target'
	        WHEN a.actual_trips <= b.total_target_trips THEN 'Below Target'
	    END AS performance_category,
	    ROUND(((a.actual_trips - b.total_target_trips) / b.total_target_trips) * 100,
	            2) AS pcnt_dfrnc
	FROM
	    get_actual_trips a
	        JOIN
	    monthly_target_trips b ON a.city_id = b.city_id
	        AND a.month = MONTHNAME(b.month)
	ORDER BY a.city_id , MONTH(b.month)

# Business Request - 3: City-Level Repeat Passenger Trip Frequency Report


		SELECT 
		    b.city_name,
		    ROUND(SUM(CASE
		                WHEN trip_count = '2-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '2_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '3-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '3_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '4-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '4_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '5-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '5_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '6-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '6_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '7-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '7_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '8-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '8_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '9-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '9_Trips',
		    ROUND(SUM(CASE
		                WHEN trip_count = '10-Trips' THEN repeat_passenger_count
		                ELSE 0
		            END) * 100 / SUM(repeat_passenger_count),
		            2) AS '10_Trips'
		FROM
		    dim_repeat_trip_distribution a
		        JOIN
		    dim_city b ON a.city_id = b.city_id
		GROUP BY b.city_name


# Business Request - 4: Identify Cities with Highest and Lowest Total New Passengers
			with cte as (
						select  b.city_name,sum(a.new_passengers) new_passengers,"Top 3" as Category 
			            from fact_passenger_summary a
						join dim_city b on a.city_id = b.city_id
						group by b.city_name order by sum(new_passengers)  desc limit 3),
			cte2 as (
						select  b.city_name,sum(a.new_passengers) new_passengers,"Bottom 3" as Category 
			            from fact_passenger_summary a
						join dim_city b on a.city_id = b.city_id
						group by b.city_name order by sum(new_passengers)  asc limit 3)
			select * from cte
			union
			select * from cte2

# Business Request - 5: Identity Month with the Highest Revenue for Each City
		 select a.city_name, a.Highest_revenue_mnth, a.revenue, 
		          concat(round((a.revenue *100)/b.total_revenue,2),"%") as pct_contribution
		 from
		(    select b.city_name, monthname(a.date) Highest_revenue_mnth, 
		            sum(a.fare_amount) revenue,
		            row_number() over(partition by b.city_name order by sum(a.fare_amount)  desc) rnk
			 from fact_trips a join dim_city b on a.city_id = b.city_id
			     group by b.city_name,monthname(a.date)
			       order by sum(fare_amount) desc
		 ) a
		    join (
		           select  city_name, sum(fare_amount) as total_revenue  from fact_trips a
		           join dim_city b on a.city_id = b.city_id group by  city_name
		          ) b
		             on a.city_name = b.city_name
		             where a.rnk = 1

# Business Request - 6: Repeat Passenger Rate Analysis 
		select 
			  b.city_name, 
			  monthname(a.month) mnth, 
			  sum(a.total_passengers) total_passeneger, 
			  sum(a.repeat_passengers) repeat_passenger, 
			  concat(round((sum(a.repeat_passengers)* 100 / sum(a.total_passengers)),2),"  %") AS monthly_repeat_passenger_rate, 
	          concat(round((sum(sum(a.repeat_passengers)) over(partition by b.city_name)* 100 / 
				         sum(sum(a.total_passengers)) over(partition by b.city_name)), 2),"  %") 
						AS overall_repeat_passenger_rat 
		from 
		  fact_passenger_summary a 
		  join dim_city b on a.city_id = b.city_id 
		group by 
		  city_name, 
		  monthname(month), 
		  month(a.month) 
		order by 
		  city_name, 
		  month(a.month);

            
           


